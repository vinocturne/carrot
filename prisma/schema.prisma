// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

//Vitess는 MySQL과 달리 foreign key를 사용하지 않음
//확인 작업을 프리즈마 자체에서 진행할 수 있도록 해야 함.

//previewFeatures, 다른 객체에 연결될 때 해당 객체가 존재하는지 확인하는 옵션
generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
}

model User {
  id         Int         @id @default(autoincrement())
  phone      String?     @unique
  email      String?     @unique
  name       String
  avatar     String?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  tokens     Token[]
  products   Product[]
  posts      Post[]
  answers    Answer[]
  wonderings Wondering[]
  writtenReviews Review[] @relation(name: "writtenReviews")
  receivedReviews Review[] @relation(name: "receivedReviews")
  fav        Fav[]
  sales Sale[]
  purchases Purchase[]
  record Record[]
  streams Stream[]
  chats Chat[]
  messages Message[]
  emailDelivery EmailDelivery[]
}

model Token {
  id        Int      @id @default(autoincrement())
  payload   String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int
}

model Product {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      Int
  image       String
  name        String
  price       Int
  description String   @db.MediumText
  favs        Fav[]
  sales Sale[]
  purchases Purchase[]
  records Record[]
  chats         Chat[]
  messages      Message[]

  @@index([userId])
}

model Fav {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}

model Post {
  id         Int         @id @default(autoincrement())
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
  question   String      @db.MediumText
  answers    Answer[]
  wonderings Wondering[]
  latitude Float?
  longitude Float?
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  @@index([userId])
}

model Answer {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  answer    String   @db.MediumText
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([postId])
}

model Wondering {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([postId])
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  review String @db.MediumText
  createdBy User @relation(name: "writtenReviews", fields: [createdById], references: [id], onDelete:Cascade )
  createdById Int
  createdFor User @relation(name: "receivedReviews", fields: [createdForId], references: [id], onDelete:Cascade )
  createdForId Int 
  score Int @default(1)
  @@index([createdById])
  @@index([createdForId])
}

model Sale {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([productId])
}

model Purchase {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
  @@index([productId])
}

model Record {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  kind Kind
  @@index([userId])
  @@index([productId])
}

enum Kind {
  Purchase
  Sale
  Fav
}

model Stream {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name String
  description String @db.MediumText
  price Int
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  messages Message[]
  cloudflareId String @default("")
  cloudflareUrl String @default("")
  cloudflareKey String @default("")
  @@index([userId])
}

model Chat {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  product   Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  messages  Message[]
  @@index([userId])
  @@index([productId])
}

model Message {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  message   String   @db.MediumText
  stream    Stream?  @relation(fields: [streamId], references: [id], onDelete: Cascade)
  streamId  Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int?
  chat      Chat?    @relation(fields: [chatId], references: [id], onDelete: Cascade)
  chatId    Int?
  @@index([userId])
  @@index([streamId])
  @@index([productId])
}

model Email {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  event EmailEvent
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  @@index([userId])
}

enum EmailEvent {
  Clicked
  Delivered
  Opened
}